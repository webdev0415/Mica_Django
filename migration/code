{
        ArrData.map((item, idx)=>{
          count = count + 1
          return (
            <span key={idx}>{`('${count}', 
            '${item["n"].properties.criticality}', 
            '${item["n"].properties.treatable}',
            '${item["n"].properties.multipleValues}',
            '${item["n"].properties.code}',
            '${item["n"].properties.timeType}',
            '${item["n"].properties.questionText}',
            '${item["n"].properties.ICDRCode}',
            '${item["n"].properties.es_questionText}',
            '${item["n"].properties.es_questionText_bk}',
            '${item["n"].properties.name}',
            '${item["n"].properties.es_name}',
            '${item["n"].properties.symptomType}',
            '${item["n"].properties.px_no_normalized}',
            '${item["n"].properties.prior}',
            '${item["n"].properties.definition}',
            '${item["n"].properties.painSwellingID}',
            '${item["n"].properties.displayOrder}',
            '${item["n"].properties.bias}',
            '${item["n"].properties.descriptorFile}',
            '${item["n"].properties.scaleTimeLimitText}',
            '${item["n"].properties.timeUnitDefault}',
            '${item["n"].properties.displaySymptom}',
            '${item["n"].properties.displayDrApp}',
            '${item["n"].properties.active}',
            '${item["n"].properties.genderGroup}',
            '${item["n"].properties.cardinality}',
            '${item["n"].properties.antithesis}',
            '${item["n"].properties.timeRangeStart}',
            '${item["n"].properties.timeRangeStop}',
            '{${item["n"].properties.subGroups}}',
            '${item["n"].properties.dataStoreTemplates}',
            `}<br /></span>
          )
        })
      }

      import React from "react";
import "./styles.css";
import {ArrData} from "./arr"
export default function App() {
  let count = 0
  let staticarr = `{1,2,3}`
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      {
      ArrData.map((item, idx)=>{
        count = count + 1
        let subgrouparr, datastorearr
        if (item["n"].properties.subGroups && item["n"].properties.subGroups.length > 0) {
          subgrouparr = item["n"].properties.subGroups.map(item => `"${item}"`)
        }
        if (item["n"].properties.dataStoreTemplates && item["n"].properties.dataStoreTemplates.length > 0) {
          datastorearr = item["n"].properties.dataStoreTemplates.map(item=>`"${item}"`)
        }
        return (
          <span key={idx}>{`('${count}', 
          '${item["n"].properties.name}', 
          ${item["n"].properties.symptomCount},
          '${item["n"].properties.code}',
          '${item["n"].properties.groupID}',
          '${staticarr}'),
          `}<br /></span>
        )
      })
    }
    </div>
    
  );
}
import "./styles.css";
import {ArrData} from './arr'

export default function App() {
  let count = 0
  let staticarr = `{1,2,3}`
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      {
      ArrData.map((item, idx)=>{
        count = count + 1
        let groupcompleteparr, mergedvisionarr
        if (item["n"].properties.groupsComplete && item["n"].properties.groupsComplete.length > 0) {
          groupcompleteparr = item["n"].properties.groupsComplete.map(item => `"${item}"`)
        }
        if (item["n"].properties.groupsComplete && item["n"].properties.groupsComplete.length > 0) {
          groupcompleteparr = item["n"].properties.groupsComplete.map(item => `"${item}"`)
        }
        return (
          <span key={idx}>{`('${count}',
          '${item["n"].properties.icd10Code}',
          ${item["n"].properties.cluster},
          ${item["n"].properties.criticality},
          ${item["n"].properties.active},
          '${item["n"].properties.dfstatus}',
          '${item["n"].properties.source}',
          '{${groupcompleteparr}}',
          ${item["n"].properties.version},
          ${item["n"].properties.prevalence},
          ${item["n"].properties.prior},
          '${item["n"].properties.name}',
          '{}',
          '${item["n"].properties.mergedVersions}',
          '${item["n"].properties.state}',
          '${item["n"].properties.createddDate}',
          '${item["n"].properties.modifiedDate}',
          '${staticarr}'),
          `}<br /></span>
        )
      })
    }
    </div>
  );
}
import "./styles.css";
import {ArrData} from "./arr"
import {relationArr } from "./arr"
export default function App() {
  let count = 0;
  return (
    <div className="App">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
      {
      ArrData.map((item, idx)=>{
        count = count + 1
        const detectArr = relationArr.filter(li=>li["p"].start.properties.shortName === item["n"].properties.shortName)[0]
        // let subgrouparr, datastorearr
        // if (item["n"].properties.subGroups && item["n"].properties.subGroups.length > 0) {
        //   subgrouparr = item["n"].properties.subGroups.map(item => `"${item}"`)
        // }
        // if (item["n"].properties.dataStoreTemplates && item["n"].properties.dataStoreTemplates.length > 0) {
        //   datastorearr = item["n"].properties.dataStoreTemplates.map(item=>`"${item}"`)
        // }
        return (
          <span key={idx}>{`('${count}', 
          '${item["n"].properties.shortName}', 
          '${item["n"].properties.longName}',
          ${item["n"].properties.defaultValue},
          ${item["n"].properties.priority},
          ${item["n"].properties.typeDescID},
          '${item["n"].properties.description}',
          '{${detectArr["p"].end.properties.conceptID}}',
          ),
          `}<br /></span>
        )
      })
    }
    </div>
  );
}
